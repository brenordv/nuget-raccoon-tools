name: 'Github Release'

on:
  workflow_call:
    inputs:
      projectPath:
        description: 'Path to the project folder'
        required: true
        type: string
      projectFile:
        description: 'Name of the project file'
        required: true
        type: string
      csprojTag:
        description: 'Tag in the csproj file to fetch the version'
        required: false
        default: 'AssemblyVersion'
        type: string
      dotnetVersion:
        description: 'Version of .NET to use'
        required: false
        default: '8.0.x'
        type: string
      releaseFilePrefix:
        description: 'Prefix for the release artifact'
        required: false
        type: string

    secrets:
      githubToken:
        description: 'GitHub token to use for the workflow'
        required: true

jobs:
  set_release_version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set_version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Define next release version
        id: set_version
        run: |
          version=$(grep -oP '(?<=<${{ inputs.csprojTag }}>).*(?=<\/${{ inputs.csprojTag }}>)' ${{ inputs.projectPath }}/${{ inputs.projectFile }})
          echo "version=$version" >> $GITHUB_OUTPUT

  create_tag:
    needs: [set_release_version]
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.set_release_version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check if this version is already built
        id: check_tag
        run: |
          TAG_EXISTS=$(curl -o /dev/null -s -w "%{http_code}\n" -H "Authorization: token ${{ secrets.githubToken }}" https://api.github.com/repos/${{ github.repository }}/git/refs/tags/${{ env.VERSION }})
          if [[ "$TAG_EXISTS" -eq 200 ]]; then
            echo "Tag already exists. Failing the pipeline."
            exit 1
          else
            echo "Tag does not exist. Proceeding."
          fi

      - name: Create Tag
        run: |
          git tag ${{ env.VERSION }}
          git push origin ${{ env.VERSION }}

  create_release:
    needs: [set_release_version, create_tag]
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.set_release_version.outputs.version }}
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.githubToken }}
        with:
          tag_name: ${{ env.VERSION }}
          name: ${{ env.VERSION }}
          draft: false
          prerelease: false

  build:
    needs: [set_release_version, create_release]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux-x64
          - os: windows-latest
            platform: win-x64
          - os: macos-latest
            platform: osx-x64
    env:
      VERSION: ${{ needs.set_release_version.outputs.version }}
      RELEASE_FILE_PREFIX: ${{ inputs.releaseFilePrefix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.dotnetVersion }}

      - name: Build Project
        run: |
          dotnet build ${{ inputs.projectPath }}/${{ inputs.projectFile }} --configuration Release --output ./output

      - name: Compressing artifact - Windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          $env:ARTIFACT_NAME="${{ env.RELEASE_FILE_PREFIX }}-${{ matrix.platform }}-${{ env.VERSION }}.zip"
          cd ./output
          Compress-Archive -Path ./* -DestinationPath ../$env:ARTIFACT_NAME
          cd ..
    
      - name: Compressing artifact - Linux/MacOS
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
          ARTIFACT_NAME="${{ env.RELEASE_FILE_PREFIX }}-${{ matrix.platform }}-${{ env.VERSION }}.zip"
          cd ./output
          zip -r ../$ARTIFACT_NAME ./*
          cd ..

      - name: Uploading artifact to release
        id: upload_to_release
        uses: softprops/action-gh-release@v1
        env:
          token: ${{ secrets.githubToken }}
        with:
          tag_name: ${{ env.VERSION }}
          name: ${{ env.VERSION }}
          draft: false
          prerelease: false
          fail_on_unmatched_files: true
          files: ${{ env.RELEASE_FILE_PREFIX }}-${{ matrix.platform }}-${{ env.VERSION }}.zip
